#ifndef __BETTI_HPP_
#define __BETTI_HPP_

/*****************************************************************************\
* This file is part of DynGB.                                                 *
*                                                                             *
* DynGB is free software: you can redistribute it and/or modify               *
* it under the terms of the GNU General Public License as published by        *
* the Free Software Foundation, either version 2 of the License, or           *
* (at your option) any later version.                                         *
*                                                                             *
* DynGB is distributed in the hope that it will be useful,                    *
* but WITHOUT ANY WARRANTY; without even the implied warranty of              *
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               *
* GNU General Public License for more details.                                *
*                                                                             *
* You should have received a copy of the GNU General Public License           *
* along with DynGB. If not, see <http://www.gnu.org/licenses/>.               *
\*****************************************************************************/

#include <list>
using std::list;
#include <map>
using std::map;

#include "system_constants.hpp"

#include "monomial.hpp"


/**
  @ingroup commalg
  @author John Perry
  @date 2017
  @brief Incremental Betti numbers for monomial ideals
  @details Computes the 1st &ldquo;incremental Betti&rdquo; numbers obtained
    when adding to the ideal generated by a set @f$ T @f$ its last monomial
    @f$ u @f$.
    (These are the degrees of the generators&rsquo; syzygies @cite KR05.)
    It does not compute the full list of Betti numbers of @f$ T @f$;
    rather, it computes the ones that involve @p u itself.
    To use the weighted degrees rather than the standard degrees, give a valid
    array of weights to @p grading.
  @param T a list of Monomial that generate a monomial ideal
  @param grading an optional list of weights, to use the weighted degrees of
    exponents, rather than the standard degrees
  @return a map wherein the key of any element is the degree of a syzygy, and
    the value @f$ d @f$ is the number of @f$ t\in T @f$ whose lcm with @p u has
    degree @f$ d @f$.
*/
map<DEG_TYPE, unsigned long> incremental_betti(
  const list<Monomial>& T,
  const WT_TYPE * grading = nullptr
);

/**
  @ingroup commalg
  @author John Perry
  @date 2017
  @brief Incremental Betti numbers for monomial ideals
  @details Computes the 1st &ldquo;incremental Betti&rdquo; numbers obtained
    when adding @p u to the ideal generated by a set @f$ T @f$
    defined by the Monomials in the range from @p start to @p end.
    (These are the degrees of the generators&rsquo; syzygies @cite KR05.)
    It does not compute the full list of Betti numbers of @f$ T@cup \{u\}@f$;
    rather, it computes the ones that involve @p u itself.
    To use the weighted degrees rather than the standard degrees, give a valid
    array of weights to @p grading.
  @param T a list of Monomial that generate a monomial ideal
  @param u a Monomial not in @p T (you can probably use one that is in @p T,
    but this is an odd thing to do)
  @param grading an optional list of weights, to use the weighted degrees of
    exponents, rather than the standard degrees
  @return a map wherein the key of any element is the degree of a syzygy, and
    the value @f$ d @f$ is the number of @f$ t\in T @f$ whose lcm with @p u has
    degree @f$ d @f$.
*/
inline map<DEG_TYPE, unsigned long> incremental_betti(
  const list<Monomial> & T, const Monomial & u,
  const WT_TYPE * grading = nullptr
) {
  list<Monomial> U(T);
  U.push_back(u);
  return incremental_betti(U, grading);
}

#endif